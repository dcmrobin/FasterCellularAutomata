#pragma kernel CSMain
#pragma kernel CSMakeCellAlive
#pragma kernel CSMakeCellDead

RWTexture2D<float4> currentBuffer;
RWTexture2D<float4> nextBuffer;

StructuredBuffer<int2> clickBuffer; // Buffer to store click position
StructuredBuffer<int4> colorBuffer; // Buffer to store cell colors

StructuredBuffer<int> customSbuffer;
StructuredBuffer<int> customBbuffer;
uint customA = 2;

bool pauseBool;
bool notDrawingBool;
bool clearing;
bool clearingAutomata;
uint brushRadius;
int width;
int height;
int wrapWidth;
int wrapHeight;

uint2 WrapCoordinates(uint2 coordinates, int wrapW, int wrapH) {
    return uint2(
        (coordinates.x + wrapW) % wrapW,
        (coordinates.y + wrapH) % wrapH
    );
}

[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    if (pauseBool)
        return;

    uint2 texDim;
    currentBuffer.GetDimensions(texDim.x, texDim.y);

    uint2 cellPos = id.xy;
    float4 current = currentBuffer[cellPos];

    // Count live neighbors
    int GoLcount = 0;
    int Seedscount = 0;
    int DayNightcount = 0;
    int Amoebacount = 0;
    int Highlifecount = 0;
    int Assimilationcount = 0;
    int Movecount = 0;
    int Diamoebacount = 0;
    int Mazecount = 0;
    int TwoXtwocount = 0;
    int PseudoLifecount = 0;
    int ThirtyFourcount = 0;
    int LongLifecount = 0;
    int Stainscount = 0;
    int Coagulationscount = 0;
    int WalledCitiescount = 0;
    int Gnarlcount = 0;
    int Replicatorcount = 0;
    int Mysterycount = 0;
    int Customcount = 0;
    int StarWarscount = 0;
    int StarWars2count = 0;
    int BriansBraincount = 0;
    int Brian6count = 0;
    int EdgeLifecount = 0;
    int Frogscount = 0;
    int Frogs2count = 0;
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            if (x == 0 && y == 0) continue;
            float4 neighbor = currentBuffer[WrapCoordinates(cellPos + uint2(x, y), wrapWidth, wrapHeight)];
            GoLcount += int((neighbor.r == 1.0) && (neighbor.g == 1.0) && (neighbor.b == 1.0));
            Seedscount += int((neighbor.r == 1.0) && (neighbor.g == 0.8) && (neighbor.b == 0));
            DayNightcount += int((neighbor.r == 0) && (neighbor.g == 1.0) && (neighbor.b == 1.0));
            Amoebacount += int((neighbor.r == 1.0) && (neighbor.g == 0) && (neighbor.b == 1.0));
            Highlifecount += int((neighbor.r == 1.0) && (neighbor.g == 0) && (neighbor.b == 0));
            Assimilationcount += int((neighbor.r == 0) && (neighbor.g == 0) && (neighbor.b == 1.0));
            Movecount += int((neighbor.r == 0) && (neighbor.g == 1.0) && (neighbor.b == 0));
            Diamoebacount += int((neighbor.r == 0.4) && (neighbor.g == 0) && (neighbor.b == 0));
            Mazecount += int((neighbor.r == 0.6) && (neighbor.g == 1.0) && (neighbor.b == 0.6));
            TwoXtwocount += int((neighbor.r == 1.0) && (neighbor.g == 1.0) && (neighbor.b == 0.2));
            PseudoLifecount += int((neighbor.r == 1.0) && (neighbor.g == 0.2) && (neighbor.b == 0));
            ThirtyFourcount += int((neighbor.r == 0.2) && (neighbor.g == 0) && (neighbor.b == 0.2));
            LongLifecount += int((neighbor.r == 0.2) && (neighbor.g == 0.2) && (neighbor.b == 0.2));
            Stainscount += int((neighbor.r == 0.2) && (neighbor.g == 0) && (neighbor.b == 1.0));
            Coagulationscount += int((neighbor.r == 0.6) && (neighbor.g == 0.6) && (neighbor.b == 0));
            WalledCitiescount += int((neighbor.r == 0.2) && (neighbor.g == 0.2) && (neighbor.b == 0.8));
            Gnarlcount += int((neighbor.r == 1.0) && (neighbor.g == 0.6) && (neighbor.b == 0));
            Replicatorcount += int((neighbor.r == 0) && (neighbor.g == 0.4) && (neighbor.b == 0.4));
            Mysterycount += int((neighbor.r == 0) && (neighbor.g == 0.4) && (neighbor.b == 0));
            Customcount += int((neighbor.r == 1.0) && (neighbor.g == 0.4) && (neighbor.b == 0) && (neighbor.a == 1.0));
            StarWarscount += int((neighbor.r == 0) && (neighbor.g == 0) && (neighbor.b == 0.8) && (neighbor.a == 0.2));
            StarWars2count += int((neighbor.r == 0.8) && (neighbor.g == 0) && (neighbor.b == 1) && (neighbor.a == 1.0));
            BriansBraincount += int((neighbor.r == 1.0) && (neighbor.g == 1.0) && (neighbor.b == 0) && (neighbor.a == 1.0));
            Brian6count += int((neighbor.r == 1.0) && (neighbor.g == 1.0) && (neighbor.b == 0.4) && (neighbor.a == 1.0));
            EdgeLifecount += int((neighbor.r == 1.0) && (neighbor.g == 0.2) && (neighbor.b == 0.2) && (neighbor.a == 1.0));
            Frogscount += int((neighbor.r == 0) && (neighbor.g == 0.8) && (neighbor.b == 0) && (neighbor.a == 0.4));
            Frogs2count += int((neighbor.r == 0.2) && (neighbor.g == 0.8) && (neighbor.b == 0.2) && (neighbor.a == 0.4));
        }
    }

    // Use ternary operator and step function for rules
    float4 next = (current.r == 1 && current.g == 1 && current.b == 1) ?
        ((GoLcount < 2 || GoLcount > 3) ? float4(0, 0, 0, 1) : float4(1, 1, 1, 1)) :
        (current.r == 1 && current.g == 0.8 && current.b == 0) ?
        float4(0, 0, 0, 1) :
        (current.r == 0 && current.g == 1 && current.b == 1) ?
        ((DayNightcount == 5 || DayNightcount < 3) ? float4(0, 0, 0, 1) : float4(0, 1, 1, 1)) :
        (current.r == 1 && current.g == 0 && current.b == 1) ?
        ((Amoebacount == 0 || Amoebacount == 2 || Amoebacount == 4 || Amoebacount == 6 || Amoebacount == 7) ? float4(0, 0, 0, 1) : float4(1, 0, 1, 1)) :
        (current.r == 1 && current.g == 0 && current.b == 0) ?
        ((Highlifecount < 2 || Highlifecount > 3) ? float4(0, 0, 0, 1) : float4(1, 0, 0, 1)) :
        (current.r == 0 && current.g == 0 && current.b == 1) ?
        ((Assimilationcount < 4 || Assimilationcount > 7) ? float4(0, 0, 0, 1) : float4(0, 0, 1, 1)) :
        (current.r == 0 && current.g == 1 && current.b == 0) ?
        ((Movecount != 2 && Movecount != 4 && Movecount != 5) ? float4(0, 0, 0, 1) : float4(0, 1, 0, 1)) :
        (current.r == 0.4 && current.g == 0 && current.b == 0) ?
        ((Diamoebacount < 5 || Diamoebacount > 8) ? float4(0, 0, 0, 1) : float4(0.4, 0, 0, 1)) :
        (current.r == 0.6 && current.g == 1 && current.b == 0.6) ?
        ((Mazecount < 1 || Mazecount > 5) ? float4(0, 0, 0, 1) : float4(0.6, 1, 0.6, 1)) :
        (current.r == 1 && current.g == 1 && current.b == 0.2) ?
        ((TwoXtwocount != 1 && TwoXtwocount != 2 && TwoXtwocount != 5) ? float4(0, 0, 0, 1) : float4(1, 1, 0.2, 1)) :
        (current.r == 1 && current.g == 0.2 && current.b == 0) ?
        ((PseudoLifecount != 2 && PseudoLifecount != 3 && PseudoLifecount != 8) ? float4(0, 0, 0, 1) : float4(1, 0.2, 0, 1)) :
        (current.r == 0.2 && current.g == 0 && current.b == 0.2) ?
        ((ThirtyFourcount != 3 && ThirtyFourcount != 4) ? float4(0, 0, 0, 1) : float4(0.2, 0, 0.2, 1)) :
        (current.r == 0.2 && current.g == 0.2 && current.b == 0.2) ?
        ((LongLifecount != 5) ? float4(0, 0, 0, 1) : float4(0.2, 0.2, 0.2, 1)) :
        (current.r == 0.2 && current.g == 0 && current.b == 1) ?
        ((Stainscount == 0 || Stainscount == 1 || Stainscount == 4) ? float4(0, 0, 0, 1) : float4(0.2, 0, 1, 1)) :
        (current.r == 0.6 && current.g == 0.6 && current.b == 0) ?
        ((Coagulationscount == 0 || Coagulationscount == 1 || Coagulationscount == 4) ? float4(0, 0, 0, 1) : float4(0.6, 0.6, 0, 1)) :
        (current.r == 0.2 && current.g == 0.2 && current.b == 0.8) ?
        ((WalledCitiescount < 2 || WalledCitiescount > 5) ? float4(0, 0, 0, 1) : float4(0.2, 0.2, 0.8, 1)) :
        (current.r == 1 && current.g == 0.6 && current.b == 0) ?
        ((Gnarlcount != 1) ? float4(0, 0, 0, 1) : float4(1, 0.6, 0, 1)) :
        (current.r == 0 && current.g == 0.4 && current.b == 0.4) ?
        ((Replicatorcount != 1 && Replicatorcount != 3 && Replicatorcount != 5 && Replicatorcount != 7) ? float4(0, 0, 0, 1) : float4(0, 0.4, 0.4, 1)) :
        (current.r == 0 && current.g == 0.4 && current.b == 0) ?
        ((Mysterycount < 5 && Mysterycount != 0) ? float4(0, 0, 0, 1) : float4(0, 0.4, 0, 1)) :
        (current.r == 0 && current.g == 0 && current.b == 0.8 && current.a == 0.2) ?
        ((StarWarscount < 3 || StarWarscount > 6) ? float4(0, 0, 0.8, 0.4) : float4(0, 0, 0.8, 0.2)) :
        (current.r == 0 && current.g == 0 && current.b == 0.8 && current.a == 0.4) ?
        float4(0, 0, 0.8, 0.6) :
        (current.r == 0 && current.g == 0 && current.b == 0.8 && current.a == 0.6) ?
        float4(0, 0, 0.8, 0.8) :
        (current.r == 0 && current.g == 0 && current.b == 0.8 && current.a == 0.8) ?
        float4(0, 0, 0.8, 1) :
        (current.r == 1 && current.g == 1 && current.b == 0 && current.a == 1) ?
        float4(1, 1, 0, 0.5) :
        (current.r == 0.8 && current.g == 0 && current.b == 1 && current.a == 1) ?
        ((StarWars2count < 3 || StarWars2count > 5) ? float4(0.8, 0, 1, 0.8) : float4(0.8, 0, 1, 1)) :
        (current.r == 0.8 && current.g == 0 && current.b == 1 && current.a == 0.8) ?
        float4(0.8, 0, 1, 0.6) :
        (current.r == 0.8 && current.g == 0 && current.b == 1 && current.a == 0.6) ?
        float4(0.8, 0, 1, 0.4) :
        (current.r == 1 && current.g == 1 && current.b == 0.4 && current.a == 1) ?
        ((Brian6count != 6) ? float4(1, 1, 0.4, 0.5) : float4(1, 1, 0.4, 1)) :
        (current.r == 1 && current.g == 0.2 && current.b == 0.2 && current.a == 1) ?
        ((EdgeLifecount < 3 || EdgeLifecount > 5 && EdgeLifecount != 8) ? float4(1, 0.2, 0.2, 0.6) : float4(1, 0.2, 0.2, 1)) :
        (current.r == 1 && current.g == 0.2 && current.b == 0.2 && current.a == 0.6) ?
        float4(1, 0.2, 0.2, 0.3) :
        (current.r == 0 && current.g == 0.8 && current.b == 0 && current.a == 0.4) ?
        ((Frogscount != 1 && Frogscount != 2) ? float4(0, 0.8, 0, 1) : float4(0, 0.8, 0, 0.4)) :
        (current.r == 0.2 && current.g == 0.8 && current.b == 0.2 && current.a == 0.4) ?
        ((Frogs2count != 1 && Frogs2count != 2 && Frogs2count != 4) ? float4(0.2, 0.8, 0.2, 1) : float4(0.2, 0.8, 0.2, 0.4)) :
        // if cell is dead
        (current.r == 0 && current.g == 0 && current.b == 0 && current.a == 1) ?
        ((GoLcount == 3) ? float4(1, 1, 1, 1) :
         (Seedscount == 2) ? float4(1, 0.8, 0, 1) :
         (DayNightcount == 3 || DayNightcount == 6 || DayNightcount == 7 || DayNightcount == 8) ? float4(0, 1, 1, 1) :
         (Amoebacount == 3 || Amoebacount == 5 || Amoebacount == 7) ? float4(1, 0, 1, 1) :
         (Highlifecount == 3 || Highlifecount == 6) ? float4(1, 0, 0, 1) :
         (Assimilationcount >= 3 && Assimilationcount <= 5) ? float4(0, 0, 1, 1) :
         (Movecount == 3 || Movecount == 6 || Movecount == 8) ? float4(0, 1, 0, 1) :
         (Diamoebacount >= 5 && Diamoebacount <= 8 || Diamoebacount == 3) ? float4(0.4, 0, 0, 1) :
         (Mazecount == 3) ? float4(0.6, 1, 0.6, 1) :
         (TwoXtwocount == 3 || TwoXtwocount == 6) ? float4(1, 1, 0.2, 1) :
         (PseudoLifecount == 3 || PseudoLifecount == 5 || PseudoLifecount == 7) ? float4(1, 0.2, 0, 1) :
         (ThirtyFourcount == 3 || ThirtyFourcount == 4) ? float4(0.2, 0, 0.2, 1) :
         (LongLifecount >= 3 && LongLifecount <= 5) ? float4(0.2, 0.2, 0.2, 1) :
         (Stainscount == 3 || Stainscount >= 6 && Stainscount <= 8) ? float4(0.2, 0, 1, 1) :
         (Coagulationscount == 3 || Coagulationscount == 7 || Coagulationscount == 8) ? float4(0.6, 0.6, 0, 1) :
         (WalledCitiescount >= 4 && WalledCitiescount <= 8) ? float4(0.2, 0.2, 0.8, 1) :
         (Gnarlcount == 1) ? float4(1, 0.6, 0, 1) :
         (Replicatorcount == 1 || Replicatorcount == 3 || Replicatorcount == 5 || Replicatorcount == 7) ? float4(0, 0.4, 0.4, 1) :
         (Mysterycount >= 3 && Mysterycount <= 5 || Mysterycount == 8) ? float4(0, 0.4, 0, 1) :
         (StarWarscount == 2 || StarWarscount == 7 || StarWarscount == 8) ? float4(0, 0, 0.8, 0.2) :
         (StarWars2count == 2) ? float4(0.8, 0, 1, 1) :
         (BriansBraincount == 2) ? float4(1, 1, 0, 1) :
         (Brian6count == 2 || Brian6count == 4 || Brian6count == 6) ? float4(1, 1, 0.4, 1) : 
         (EdgeLifecount == 3 || EdgeLifecount == 7) ? float4(1, 0.2, 0.2, 1) :
         (Frogscount == 3 || Frogscount == 4) ? float4(0, 0.8, 0, 0.4) :
         (Frogs2count == 3) ? float4(0.2, 0.8, 0.2, 0.4) : float4(0, 0, 0, 1)) : float4(0, 0, 0, 1);


    float decreaseAmount = 0.0;
    if (customA > 2) {
        decreaseAmount = (float)(1000/(customA - 1))/1000;
    }

    if (current.r == 1 && current.g == 0.4 && current.b == 0 && current.a == 1) {
        for (uint s = 0; s < customSbuffer.Length; s++) {
            if (Customcount == customSbuffer[s]) {
                next = float4(1, 0.4, 0, 1);
                break;
            }
            else if (customA > 2 && s == customSbuffer.Length - 1 && Customcount != customSbuffer[s]) {
                next = float4(1, 0.4, 0, 1 - decreaseAmount);
            }
        }
    }
    else if (current.r == 0 && current.g == 0 && current.b == 0 && current.a == 1) {
        for (uint b = 0; b < customBbuffer.Length; b++) {
            if (Customcount == customBbuffer[b]) {
                next = float4(1, 0.4, 0, 1);
                break;
            }
        }
    }

    if (customA > 2) {
        if (current.r == 1 && current.g == 0.4 && current.b == 0 && current.a < 1 && current.a > decreaseAmount) {
            next = float4(1, 0.4, 0, current.a - decreaseAmount);
        }
        else if (current.r == 1 && current.g == 0.4 && current.b == 0 && current.a <= decreaseAmount) {
            next = float4(0, 0, 0, 1);
        }
    }

    nextBuffer[cellPos] = next;
    if (clearing) {
        nextBuffer[id.xy] = float4(0, 0, 0, 1);
    }
    if (clearingAutomata) {
        if (current.r == (float)colorBuffer[0].r/1000 && current.g == (float)colorBuffer[0].g/1000 && current.b == (float)colorBuffer[0].b/1000 || next.r == (float)colorBuffer[0].r/1000 && next.g == (float)colorBuffer[0].g/1000 && next.b == (float)colorBuffer[0].b/1000) {
            nextBuffer[id.xy] = float4(0, 0, 0, 1);
        }
    }
}

[numthreads(2, 2, 1)]
void CSMakeCellAlive() {
    if (notDrawingBool)
        return;

    // Read click position from buffer
    int2 clickPos = clickBuffer[0];

    // Apply brush size
    int halfBrushSize = brushRadius / 2;

    // Iterate over the cells in the neighborhood of the clicked point
    for (int i = clickPos.x - halfBrushSize; i <= clickPos.x + halfBrushSize; i++) {
        for (int j = clickPos.y - halfBrushSize; j <= clickPos.y + halfBrushSize; j++) {
            // Check if the current position is within the bounds of the texture
            if (i >= 0 && i < width && j >= 0 && j < height) {
                currentBuffer[int2(i, j)] = float4((float4)colorBuffer[0]/1000);
            }
        }
    }
}

[numthreads(2, 2, 1)]
void CSMakeCellDead() {
    if (notDrawingBool)
        return;

    // Read click position from buffer
    int2 clickPos = clickBuffer[0];

    // Apply brush size
    int halfBrushSize = brushRadius / 2;

    // Iterate over the cells in the neighborhood of the clicked point
    for (int i = clickPos.x - halfBrushSize; i <= clickPos.x + halfBrushSize; i++) {
        for (int j = clickPos.y - halfBrushSize; j <= clickPos.y + halfBrushSize; j++) {
            // Check if the current position is within the bounds of the texture
            if (i >= 0 && i < width && j >= 0 && j < height) {
                currentBuffer[int2(i, j)] = float4(0, 0, 0, 1);
            }
        }
    }
}
