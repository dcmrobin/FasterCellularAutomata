#pragma kernel CSMain
#pragma kernel CSMakeCellAlive
#pragma kernel CSMakeCellDead

RWTexture2D<float4> currentBuffer;
RWTexture2D<float4> nextBuffer;

StructuredBuffer<int2> clickBuffer; // Buffer to store click position
StructuredBuffer<int4> colorBuffer; // Buffer to store cell colors

StructuredBuffer<int> customSbuffer;
StructuredBuffer<int> customBbuffer;
uint customA = 2;

bool pauseBool;
bool notDrawingBool;
bool clearing;
bool clearingAutomata;
uint brushRadius;
int width;
int height;
int wrapWidth;
int wrapHeight;

uint2 WrapCoordinates(uint2 coordinates, int wrapW, int wrapH) {
    return uint2(
        (coordinates.x + wrapW) % wrapW,
        (coordinates.y + wrapH) % wrapH
    );
}

[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    if (pauseBool)
        return;

    uint2 cellPos = id.xy;
    float4 current = currentBuffer[cellPos];

    // Precompute dimensions
    uint2 texDim;
    currentBuffer.GetDimensions(texDim.x, texDim.y);

    // Shared memory for neighbor positions
    float4 neighbor[9];
    int index = 0;
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            neighbor[index++] = currentBuffer[WrapCoordinates(cellPos + uint2(x, y), wrapWidth, wrapHeight)];
        }
    }

    // Initialize counts
    int counts[28];
    counts[0] = 0;

    for (int c = 1; c < 28; c++) {
        counts[c] = 0;
    }

    for (int i = 0; i < 9; i++) {
        float4 n = neighbor[i];
        if (i == 4) continue; // Skip the cell itself

        counts[0] += int((n.r == 1.0) && (n.g == 1.0) && (n.b == 1.0)); // GoLcount
        counts[1] += int((n.r == 1.0) && (n.g == 0.8) && (n.b == 0));   // Seedscount
        counts[2] += int((n.r == 0) && (n.g == 1.0) && (n.b == 1.0));  // DayNightcount
        counts[3] += int((n.r == 1.0) && (n.g == 0) && (n.b == 1.0));  // Amoebacount
        counts[4] += int((n.r == 1.0) && (n.g == 0) && (n.b == 0));    // Highlifecount
        counts[5] += int((n.r == 0) && (n.g == 0) && (n.b == 1.0));    // Assimilationcount
        counts[6] += int((n.r == 0) && (n.g == 1.0) && (n.b == 0));    // Movecount
        counts[7] += int((n.r == 0.4) && (n.g == 0) && (n.b == 0));    // Diamoebacount
        counts[8] += int((n.r == 0.6) && (n.g == 1.0) && (n.b == 0.6)); // Mazecount
        counts[9] += int((n.r == 1.0) && (n.g == 1.0) && (n.b == 0.2)); // TwoXtwocount
        counts[10] += int((n.r == 1.0) && (n.g == 0.2) && (n.b == 0));  // PseudoLifecount
        counts[11] += int((n.r == 0.2) && (n.g == 0) && (n.b == 0.2));  // ThirtyFourcount
        counts[12] += int((n.r == 0.2) && (n.g == 0.2) && (n.b == 0.2)); // LongLifecount
        counts[13] += int((n.r == 0.2) && (n.g == 0) && (n.b == 1.0));  // Stainscount
        counts[14] += int((n.r == 0.6) && (n.g == 0.6) && (n.b == 0));  // Coagulationscount
        counts[15] += int((n.r == 0.2) && (n.g == 0.2) && (n.b == 0.8)); // WalledCitiescount
        counts[16] += int((n.r == 1.0) && (n.g == 0.6) && (n.b == 0));  // Gnarlcount
        counts[17] += int((n.r == 0) && (n.g == 0.4) && (n.b == 0.4));  // Replicatorcount
        counts[18] += int((n.r == 0) && (n.g == 0.4) && (n.b == 0));    // Mysterycount
        counts[19] += int((n.r == 1.0) && (n.g == 0.4) && (n.b == 0) && (n.a == 1.0)); // Customcount
        counts[20] += int((n.r == 0) && (n.g == 0) && (n.b == 0.8) && (n.a == 0.2)); // StarWarscount
        counts[21] += int((n.r == 0.8) && (n.g == 0) && (n.b == 1) && (n.a == 1.0)); // StarWars2count
        counts[22] += int((n.r == 1.0) && (n.g == 1.0) && (n.b == 0) && (n.a == 1.0)); // BriansBraincount
        counts[23] += int((n.r == 1.0) && (n.g == 1.0) && (n.b == 0.4) && (n.a == 1.0)); // Brian6count
        counts[24] += int((n.r == 1.0) && (n.g == 0.2) && (n.b == 0.2) && (n.a == 1.0)); // EdgeLifecount
        counts[25] += int((n.r == 0) && (n.g == 0.8) && (n.b == 0) && (n.a == 0.4)); // Frogscount
        counts[26] += int((n.r == 0.2) && (n.g == 0.8) && (n.b == 0.2) && (n.a == 0.4)); // Frogs2count
    }

    // Use ternary operator and step function for rules
    float4 next = float4(0, 0, 0, 1); // Default state
    if (current.r == 1 && current.g == 1 && current.b == 1) {
        next = (counts[0] < 2 || counts[0] > 3) ? float4(0, 0, 0, 1) : float4(1, 1, 1, 1);
    } else if (current.r == 1 && current.g == 0.8 && current.b == 0) {
        next = float4(0, 0, 0, 1);
    } else if (current.r == 0 && current.g == 1 && current.b == 1) {
        next = (counts[2] == 5 || counts[2] < 3) ? float4(0, 0, 0, 1) : float4(0, 1, 1, 1);
    } else if (current.r == 1 && current.g == 0 && current.b == 1) {
        next = (counts[3] == 0 || counts[3] == 2 || counts[3] == 4 || counts[3] == 6 || counts[3] == 7) ? float4(0, 0, 0, 1) : float4(1, 0, 1, 1);
    } else if (current.r == 1 && current.g == 0 && current.b == 0) {
        next = (counts[4] < 2 || counts[4] > 3) ? float4(0, 0, 0, 1) : float4(1, 0, 0, 1);
    } else if (current.r == 0 && current.g == 0 && current.b == 1) {
        next = (counts[5] < 4 || counts[5] > 7) ? float4(0, 0, 0, 1) : float4(0, 0, 1, 1);
    } else if (current.r == 0 && current.g == 1 && current.b == 0) {
        next = (counts[6] != 2 && counts[6] != 4 && counts[6] != 5) ? float4(0, 0, 0, 1) : float4(0, 1, 0, 1);
    } else if (current.r == 0.4 && current.g == 0 && current.b == 0) {
        next = (counts[7] < 5 || counts[7] > 8) ? float4(0, 0, 0, 1) : float4(0.4, 0, 0, 1);
    } else if (current.r == 0.6 && current.g == 1 && current.b == 0.6) {
        next = (counts[8] < 1 || counts[8] > 5) ? float4(0, 0, 0, 1) : float4(0.6, 1, 0.6, 1);
    } else if (current.r == 1 && current.g == 1 && current.b == 0.2) {
        next = (counts[9] != 1 && counts[9] != 2 && counts[9] != 5) ? float4(0, 0, 0, 1) : float4(1, 1, 0.2, 1);
    } else if (current.r == 1 && current.g == 0.2 && current.b == 0) {
        next = (counts[10] != 2 && counts[10] != 3 && counts[10] != 8) ? float4(0, 0, 0, 1) : float4(1, 0.2, 0, 1);
    } else if (current.r == 0.2 && current.g == 0 && current.b == 0.2) {
        next = (counts[11] != 3 && counts[11] != 4) ? float4(0, 0, 0, 1) : float4(0.2, 0, 0.2, 1);
    } else if (current.r == 0.2 && current.g == 0.2 && current.b == 0.2) {
        next = (counts[12] != 5) ? float4(0, 0, 0, 1) : float4(0.2, 0.2, 0.2, 1);
    } else if (current.r == 0.2 && current.g == 0 && current.b == 1) {
        next = (counts[13] == 0 || counts[13] == 1 || counts[13] == 4) ? float4(0, 0, 0, 1) : float4(0.2, 0, 1, 1);
    } else if (current.r == 0.6 && current.g == 0.6 && current.b == 0) {
        next = (counts[14] == 0 || counts[14] == 1 || counts[14] == 4) ? float4(0, 0, 0, 1) : float4(0.6, 0.6, 0, 1);
    } else if (current.r == 0.2 && current.g == 0.2 && current.b == 0.8) {
        next = (counts[15] < 2 || counts[15] > 5) ? float4(0, 0, 0, 1) : float4(0.2, 0.2, 0.8, 1);
    } else if (current.r == 1 && current.g == 0.6 && current.b == 0) {
        next = (counts[16] != 1) ? float4(0, 0, 0, 1) : float4(1, 0.6, 0, 1);
    } else if (current.r == 0 && current.g == 0.4 && current.b == 0.4) {
        next = (counts[17] != 1 && counts[17] != 3 && counts[17] != 5 && counts[17] != 7) ? float4(0, 0, 0, 1) : float4(0, 0.4, 0.4, 1);
    } else if (current.r == 0 && current.g == 0.4 && current.b == 0) {
        next = (counts[18] < 5 && counts[18] != 0) ? float4(0, 0, 0, 1) : float4(0, 0.4, 0, 1);
    } else if (current.r == 0 && current.g == 0 && current.b == 0.8 && current.a == 0.2) {
        next = (counts[20] < 3 || counts[20] > 6) ? float4(0, 0, 0.8, 0.4) : float4(0, 0, 0.8, 0.2);
    } else if (current.r == 0 && current.g == 0 && current.b == 0.8 && current.a == 0.4) {
        next = float4(0, 0, 0.8, 0.6);
    } else if (current.r == 0 && current.g == 0 && current.b == 0.8 && current.a == 0.6) {
        next = float4(0, 0, 0.8, 0.8);
    } else if (current.r == 0 && current.g == 0 && current.b == 0.8 && current.a == 0.8) {
        next = float4(0, 0, 0.8, 1);
    } else if (current.r == 0.8 && current.g == 0 && current.b == 1 && current.a == 1) {
        next = (counts[21] < 3 || counts[21] > 5) ? float4(0.8, 0, 1, 0.6) : float4(0.8, 0, 1, 1);
    } else if (current.r == 0.8 && current.g == 0 && current.b == 1 && current.a == 0.6) {
        next = float4(0.8, 0, 1, 0.2);
    } else if (current.r == 1 && current.g == 1 && current.b == 0 && current.a == 1) {
        next = float4(1, 1, 0, 0.5);
    } else if (current.r == 1 && current.g == 1 && current.b == 0.4 && current.a == 1) {
        next = (counts[23] != 6) ? float4(1, 1, 0.4, 0.5) : float4(1, 1, 0.4, 1);
    } else if (current.r == 1 && current.g == 0.2 && current.b == 0.2 && current.a == 1) {
        next = (counts[24] < 3 || counts[24] > 5 && counts[24] != 8) ? float4(1, 0.2, 0.2, 0.6) : float4(1, 0.2, 0.2, 1);
    } else if (current.r == 1 && current.g == 0.2 && current.b == 0.2 && current.a == 0.6) {
        next = float4(1, 0.2, 0.2, 0.3);
    } else if (current.r == 0 && current.g == 0.8 && current.b == 0 && current.a == 0.4) {
        next = (counts[25] != 1 && counts[25] != 2) ? float4(0, 0.8, 0, 1) : float4(0, 0.8, 0, 0.4);
    } else if (current.r == 0.2 && current.g == 0.8 && current.b == 0.2 && current.a == 0.4) {
        next = (counts[26] != 1 && counts[26] != 2 && counts[26] != 4) ? float4(0.2, 0.8, 0.2, 1) : float4(0.2, 0.8, 0.2, 0.4);
    // if cell is dead
    } else if (current.r == 0 && current.g == 0 && current.b == 0 && current.a == 1) {
        if (counts[0] == 3) next = float4(1, 1, 1, 1);
        else if (counts[1] == 2) next = float4(1, 0.8, 0, 1);
        else if (counts[2] == 3 || counts[2] == 6 || counts[2] == 7 || counts[2] == 8) next = float4(0, 1, 1, 1);
        else if (counts[3] == 3 || counts[3] == 5 || counts[3] == 7) next = float4(1, 0, 1, 1);
        else if (counts[4] == 3 || counts[4] == 6) next = float4(1, 0, 0, 1);
        else if (counts[5] >= 3 && counts[5] <= 5) next = float4(0, 0, 1, 1);
        else if (counts[6] == 3 || counts[6] == 6 || counts[6] == 8) next = float4(0, 1, 0, 1);
        else if (counts[7] >= 5 && counts[7] <= 8 || counts[7] == 3) next = float4(0.4, 0, 0, 1);
        else if (counts[8] == 3) next = float4(0.6, 1, 0.6, 1);
        else if (counts[9] == 3 || counts[9] == 6) next = float4(1, 1, 0.2, 1);
        else if (counts[10] == 3 || counts[10] == 5 || counts[10] == 7) next = float4(1, 0.2, 0, 1);
        else if (counts[11] == 3 || counts[11] == 4) next = float4(0.2, 0, 0.2, 1);
        else if (counts[12] >= 3 && counts[12] <= 5) next = float4(0.2, 0.2, 0.2, 1);
        else if (counts[13] == 3 || counts[13] >= 6 && counts[13] <= 8) next = float4(0.2, 0, 1, 1);
        else if (counts[14] == 3 || counts[14] == 7 || counts[14] == 8) next = float4(0.6, 0.6, 0, 1);
        else if (counts[15] >= 4 && counts[15] <= 8) next = float4(0.2, 0.2, 0.8, 1);
        else if (counts[16] == 1) next = float4(1, 0.6, 0, 1);
        else if (counts[17] == 1 || counts[17] == 3 || counts[17] == 5 || counts[17] == 7) next = float4(0, 0.4, 0.4, 1);
        else if (counts[18] >= 3 && counts[18] <= 5 || counts[18] == 8) next = float4(0, 0.4, 0, 1);
        else if (counts[20] == 2 || counts[20] == 7 || counts[20] == 8) next = float4(0, 0, 0.8, 0.2);
        else if (counts[21] == 2) next = float4(0.8, 0, 1, 1);
        else if (counts[22] == 2) next = float4(1, 1, 0, 1);
        else if (counts[23] == 2 || counts[23] == 4 || counts[23] == 6) next = float4(1, 1, 0.4, 1);
        else if (counts[24] == 3 || counts[24] == 7) next = float4(1, 0.2, 0.2, 1);
        else if (counts[25] == 3 || counts[25] == 4) next = float4(0, 0.8, 0, 0.4);
        else if (counts[26] == 3) next = float4(0.2, 0.8, 0.2, 0.4);
        else next = float4(0, 0, 0, 1);
    }

    float decreaseAmount = 0.0;
    if (customA > 2) {
        decreaseAmount = (float)(1000 / (customA - 1)) / 1000;
    }

    if (current.r == 1 && current.g == 0.4 && current.b == 0 && current.a == 1) {
        for (uint s = 0; s < customSbuffer.Length; s++) {
            if (counts[19] == customSbuffer[s]) {
                next = float4(1, 0.4, 0, 1);
                break;
            } else if (customA > 2 && s == customSbuffer.Length - 1 && counts[19] != customSbuffer[s]) {
                next = float4(1, 0.4, 0, 1 - decreaseAmount);
            }
        }
    } else if (current.r == 0 && current.g == 0 && current.b == 0 && current.a == 1) {
        for (uint b = 0; b < customBbuffer.Length; b++) {
            if (counts[19] == customBbuffer[b]) {
                next = float4(1, 0.4, 0, 1);
                break;
            }
        }
    }

    if (customA > 2) {
        if (current.r == 1 && current.g == 0.4 && current.b == 0 && current.a < 1 && current.a > decreaseAmount) {
            next = float4(1, 0.4, 0, current.a - decreaseAmount);
        } else if (current.r == 1 && current.g == 0.4 && current.b == 0 && current.a <= decreaseAmount) {
            next = float4(0, 0, 0, 1);
        }
    }

    nextBuffer[cellPos] = next;
    if (clearing) {
        nextBuffer[id.xy] = float4(0, 0, 0, 1);
    }
    if (clearingAutomata) {
        if (current.r == (float)colorBuffer[0].r / 1000 && current.g == (float)colorBuffer[0].g / 1000 && current.b == (float)colorBuffer[0].b / 1000 ||
            next.r == (float)colorBuffer[0].r / 1000 && next.g == (float)colorBuffer[0].g / 1000 && next.b == (float)colorBuffer[0].b / 1000) {
            nextBuffer[id.xy] = float4(0, 0, 0, 1);
        }
    }
}

[numthreads(2, 2, 1)]
void CSMakeCellAlive() {
    if (notDrawingBool)
        return;

    int2 clickPos = clickBuffer[0];
    int halfBrushSize = brushRadius / 2;

    for (int i = clickPos.x - halfBrushSize; i <= clickPos.x + halfBrushSize; i++) {
        for (int j = clickPos.y - halfBrushSize; j <= clickPos.y + halfBrushSize; j++) {
            if (i >= 0 && i < width && j >= 0 && j < height) {
                currentBuffer[int2(i, j)] = float4((float4)colorBuffer[0] / 1000);
            }
        }
    }
}

[numthreads(2, 2, 1)]
void CSMakeCellDead() {
    if (notDrawingBool)
        return;

    int2 clickPos = clickBuffer[0];
    int halfBrushSize = brushRadius / 2;

    for (int i = clickPos.x - halfBrushSize; i <= clickPos.x + halfBrushSize; i++) {
        for (int j = clickPos.y - halfBrushSize; j <= clickPos.y + halfBrushSize; j++) {
            if (i >= 0 && i < width && j >= 0 && j < height) {
                currentBuffer[int2(i, j)] = float4(0, 0, 0, 1);
            }
        }
    }
}
